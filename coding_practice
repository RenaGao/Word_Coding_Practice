{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mike\n",
      "I can run very fast!\n",
      "Tom\n",
      "19\n",
      "female\n",
      "I can run very fast!\n"
     ]
    }
   ],
   "source": [
    "# class \n",
    "# 对于同一类事物的话，我们可以把这类东西归纳概括；\n",
    "\n",
    "class ClassName:\n",
    "    # 构造函数 constructor\n",
    "    \n",
    "    # 类的其他方法；\n",
    "    pass\n",
    "    \n",
    "\n",
    "class Person:\n",
    "    # init: initial\n",
    "    # self: current object\n",
    "    def __init__(self, name, age, gender):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.gender = gender\n",
    "        \n",
    "    def get_name(self):\n",
    "        return self.name\n",
    "    \n",
    "    def get_age(self):\n",
    "        return self.age\n",
    "    \n",
    "    def get_gender(self):\n",
    "        return self.gender\n",
    "    \n",
    "    def run(self):\n",
    "        print(\"I can run very fast!\")\n",
    "\n",
    "person1 = Person(\"Mike\", 20, \"male\")\n",
    "name = person1.get_name()\n",
    "print(name)\n",
    "person1.run()\n",
    "\n",
    "person2 = Person(\"Tom\", 19, \"female\")\n",
    "print(person2.get_name())\n",
    "print(person2.get_age())\n",
    "print(person2.get_gender())\n",
    "person2.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "class FilterWords:\n",
    "    def __init__(self):\n",
    "        pass\n",
    "    \n",
    "    def filter_even_words(self, data):\n",
    "        result = []\n",
    "        all_words = data.split()\n",
    "        for word in all_words:\n",
    "            if len(word) % 2 == 0:\n",
    "                print(word)\n",
    "                result.append(word)\n",
    "        return result\n",
    "    \n",
    "    def filter_odd_words(self, data):\n",
    "        result = []\n",
    "        all_words = data.split()\n",
    "        for word in all_words:\n",
    "            if len(word) % 2 != 0:\n",
    "                print(word)\n",
    "                result.append(word)\n",
    "        return result \n",
    "    \n",
    "    def filter_tags(self, data):    # sdsdsd.<.htm...l>\n",
    "        result = []\n",
    "        for value in data.values():\n",
    "            if re.search(r'<.+>', value) :\n",
    "                print(value)\n",
    "                result.append(value)\n",
    "        return result \n",
    "    \n",
    "    #  temp = re.search(r'<.+>', value)\n",
    "    #  no_dot_tag = re.sub(r'\\.', '', temp)\n",
    "\n",
    "    \n",
    "filter = FilterWords()\n",
    "filter.filter_tags({1: \"asds\", 2: \"dasdasd\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n",
      "7 23\n",
      "<.htm&%$#@!.().l>\n",
      "<html>\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "string = 'sdsdsd.<.htm&%$#@!.().l>'\n",
    "print(type(string))\n",
    "left_index = string.index('<')\n",
    "right_index = string.index('>')\n",
    "\n",
    "print(left_index, right_index)\n",
    "\n",
    "temp = string[left_index : right_index+1]\n",
    "print(temp)\n",
    "\n",
    "# re 方法：\n",
    "# 1. find()\n",
    "\n",
    "\n",
    "final_result = re.sub('[\\.&%$#@!()]', '', temp)\n",
    "print(final_result)\n",
    "# temp = re.search(r'<.+>', string)\n",
    "\n",
    "# print(type(temp))\n",
    "# no_dot_tag = re.sub(r'\\.', '', temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 继承，AdvancedFilterWords类已经继承了FilterWords里面的所有的方法/functions\n",
    "class AdvancedFilterWords(FilterWords):\n",
    "#     def __init__(self):\n",
    "#         pass\n",
    "    \n",
    "    def filter_tags(self, data):    # <html>  <a>   <>\n",
    "        result = []\n",
    "        for value in data.values():\n",
    "            if re.search(r'<<.+>>', value) :\n",
    "                print(value)\n",
    "                result.append(value)\n",
    "        return result \n",
    "    \n",
    "advanced = AdvancedFilterWords()\n",
    "advanced.filter_even_words()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
